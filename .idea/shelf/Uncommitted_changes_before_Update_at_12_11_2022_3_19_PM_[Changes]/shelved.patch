Index: pages/GiamDanDaoHam.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from sklearn.linear_model import LinearRegression\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\nimport plotly.graph_objects as go\r\n\r\nimport streamlit as st\r\nst.markdown(\"# Giảm dần đạo hàm ❄️\")\r\nst.sidebar.markdown(\"# Giảm dần đạo hàm ❄️\")\r\n\r\napp_mode = st.sidebar.selectbox('Select Page',['Bai01','Bai02', 'Bai02a','Bai03', 'Bai04', 'Bai05', 'Temp']) \r\n\r\nif (app_mode == 'Bai01'):\r\n    st.title('Bài 1')\r\n    def grad(x):\r\n        return 2*x+ 5*np.cos(x)\r\n    def cost(x):\r\n        return x**2 + 5*np.sin(x)\r\n\r\n    def myGD1(x0, eta):\r\n        x = [x0]\r\n        for it in range(100):\r\n            x_new = x[-1] - eta*grad(x[-1])\r\n            if abs(grad(x_new)) < 1e-3: # just a small number\r\n                break\r\n            x.append(x_new)\r\n        return (x, it)\r\n    \r\n    x0 = -5\r\n    eta = 0.1\r\n    (x, it) = myGD1(x0, eta)\r\n    x = np.array(x)\r\n    y = cost(x)\r\n\r\n    n = 101\r\n    xx = np.linspace(-6, 6, n)\r\n    yy = xx**2 + 5*np.sin(xx)\r\n\r\n    fig, ax = plt.subplots()\r\n    plt.subplot(2,4,1)\r\n    plt.plot(xx, yy)\r\n    index = 0\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.subplot(2,4,2)\r\n    plt.plot(xx, yy)\r\n    index = 1\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.subplot(2,4,3)\r\n    plt.plot(xx, yy)\r\n    index = 2\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.subplot(2,4,4)\r\n    plt.plot(xx, yy)\r\n    index = 3\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.subplot(2,4,5)\r\n    plt.plot(xx, yy)\r\n    index = 4\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.subplot(2,4,6)\r\n    plt.plot(xx, yy)\r\n    index = 5\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.subplot(2,4,7)\r\n    plt.plot(xx, yy)\r\n    index = 7\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.subplot(2,4,8)\r\n    plt.plot(xx, yy)\r\n    index = 11\r\n    plt.plot(x[index], y[index], 'ro')\r\n    s = ' iter%d/%d, grad=%.3f ' % (index, it, grad(x[index]))\r\n    plt.xlabel(s, fontsize = 8)\r\n    plt.axis([-7, 7, -10, 50])\r\n\r\n    plt.tight_layout()\r\n    st.write(fig)\r\nelif (app_mode == 'Bai02'):\r\n    st.title('Bài 2')\r\n    \r\n    X = np.random.rand(1000)\r\n    y = 4 + 3 * X + .5*np.random.randn(1000)\r\n\r\n    model = LinearRegression()\r\n    model.fit(X.reshape(-1, 1), y.reshape(-1, 1))\r\n    w, b = model.coef_[0][0], model.intercept_[0]\r\n    x0 = 0\r\n    x1 = 1\r\n    y0 = w*x0 + b\r\n    y1 = w*x1 + b\r\n\r\n    fig, ax = plt.subplots()\r\n    plt.plot(X, y, 'bo', markersize = 2)\r\n    plt.plot([x0, x1], [y0, y1], 'r')\r\n    st.pyplot(fig)    \r\nelif (app_mode == 'Bai02a'):\r\n    st.title('Bài 02a')\r\n    X = np.random.rand(1000)\r\n    y = 4 + 3 * X + .5*np.random.randn(1000) # noise added\r\n\r\n    model = LinearRegression()\r\n    model.fit(X.reshape(-1, 1), y.reshape(-1, 1))\r\n\r\n    w, b = model.coef_[0][0], model.intercept_[0]\r\n    sol_sklearn = np.array([b, w])\r\n    st.write('Solution found by sklearn:', sol_sklearn)\r\n\r\n    # Building Xbar \r\n    one = np.ones((X.shape[0],1))\r\n    Xbar = np.concatenate((one, X.reshape(-1, 1)), axis = 1)\r\n\r\n    def grad(w):\r\n        N = Xbar.shape[0]\r\n        return 1/N * Xbar.T.dot(Xbar.dot(w) - y)\r\n\r\n    def cost(w):\r\n        N = Xbar.shape[0]\r\n        return .5/N*np.linalg.norm(y - Xbar.dot(w))**2\r\n\r\n    def myGD(w_init, eta):\r\n        w = [w_init]\r\n        for it in range(100):\r\n            w_new = w[-1] - eta*grad(w[-1])\r\n            if np.linalg.norm(grad(w_new))/len(w_new) < 1e-3:\r\n                break \r\n            w.append(w_new)\r\n        return (w, it)\r\n\r\n    w_init = np.array([0, 0])\r\n    (w1, it1) = myGD(w_init, 1)\r\n    st.write('Sol found by GD: w = ', w1[-1], ',\\nafter %d iterations.' %(it1+1))\r\nelif (app_mode == 'Bai03'):\r\n    st.title('Bài 3')\r\n    np.random.seed(100)\r\n    N = 1000\r\n    X = np.random.rand(N)\r\n    y = 4 + 3 * X + .5*np.random.randn(N)\r\n\r\n    model = LinearRegression()\r\n    model.fit(X.reshape(-1, 1), y.reshape(-1, 1))\r\n    w, b = model.coef_[0][0], model.intercept_[0]\r\n    st.write('b = %.4f va w = %.4f' % (b, w))\r\n\r\n    one = np.ones((X.shape[0],1))\r\n    Xbar = np.concatenate((one, X.reshape(-1, 1)), axis = 1)\r\n\r\n    def grad(w):\r\n        N = Xbar.shape[0]\r\n        return 1/N * Xbar.T.dot(Xbar.dot(w) - y)\r\n\r\n    def cost(w):\r\n        N = Xbar.shape[0]\r\n        return .5/N*np.linalg.norm(y - Xbar.dot(w))**2\r\n\r\n    def myGD(w_init, eta):\r\n        w = [w_init]\r\n        for it in range(100):\r\n            w_new = w[-1] - eta*grad(w[-1])\r\n            if np.linalg.norm(grad(w_new))/len(w_new) < 1e-3:\r\n                break \r\n            w.append(w_new)\r\n        return (w, it)\r\n\r\n    w_init = np.array([0, 0])\r\n    (w1, it1) = myGD(w_init, 1)\r\n    st.write('Sol found by GD: w = ', w1[-1], ',\\nafter %d iterations.' %(it1+1))\r\n    # for item in w1:\r\n    #     st.write(item, cost(item))\r\n\r\n    # st.write(len(w1))\r\n\r\n    A = N/(2*N)\r\n    B = np.sum(X*X)/(2*N)\r\n    C = -np.sum(y)/(2*N)\r\n    D = -np.sum(X*y)/(2*N)\r\n    E = np.sum(X)/(2*N)\r\n    F = np.sum(y*y)/(2*N)\r\n\r\n    b = np.linspace(0,6,21)\r\n    w = np.linspace(0,6,21)\r\n    b, w = np.meshgrid(b, w)\r\n    z = A*b*b + B*w*w + C*b*2 + D*w*2 + E*b*w*2 + F\r\n\r\n    temp = w1[0]\r\n    bb = temp[0]\r\n    ww = temp[1]\r\n    zz = cost(temp) \r\n    ax = plt.axes(projection=\"3d\")\r\n    ax.plot3D(bb, ww, zz, 'ro', markersize = 3)\r\n\r\n    temp = w1[1]\r\n    bb = temp[0]\r\n    ww = temp[1]\r\n    zz = cost(temp) \r\n    ax.plot3D(bb, ww, zz, 'ro', markersize = 3)\r\n\r\n    temp = w1[2]\r\n    bb = temp[0]\r\n    ww = temp[1]\r\n    zz = cost(temp) \r\n    ax.plot3D(bb, ww, zz, 'ro', markersize = 3)\r\n\r\n    temp = w1[3]\r\n    bb = temp[0]\r\n    ww = temp[1]\r\n    zz = cost(temp) \r\n    ax.plot3D(bb, ww, zz, 'ro', markersize = 3)\r\n        \r\n    # Create an object for graph layout\r\n    data = go.Surface(x = b, y = w, z = z)\r\n    fig = go.Figure(data)\r\n\r\n    st.plotly_chart(fig)\r\n    \r\n\r\nelif (app_mode == 'Bai04'):\r\n    st.title('Bài 4')\r\n    x = np.linspace(-2, 2, 21)\r\n    y = np.linspace(-2, 2, 21)\r\n    X, Y = np.meshgrid(x, y)\r\n    Z = X**2 + Y**2\r\n    fig, ax = plt.subplots()\r\n    plt.contour(X, Y, Z, 10)\r\n    st.pyplot(fig)\r\nelif (app_mode == 'Bai05'):\r\n    st.title('Bài 5')\r\n    np.random.seed(100)\r\n    N = 1000\r\n    X = np.random.rand(N)\r\n    y = 4 + 3 * X + .5*np.random.randn(N)\r\n\r\n    model = LinearRegression()\r\n    model.fit(X.reshape(-1, 1), y.reshape(-1, 1))\r\n    w, b = model.coef_[0][0], model.intercept_[0]\r\n    st.write('b = %.4f va w = %.4f' % (b, w))\r\n\r\n    one = np.ones((X.shape[0],1))\r\n    Xbar = np.concatenate((one, X.reshape(-1, 1)), axis = 1)\r\n\r\n    def grad(w):\r\n        N = Xbar.shape[0]\r\n        return 1/N * Xbar.T.dot(Xbar.dot(w) - y)\r\n\r\n    def cost(w):\r\n        N = Xbar.shape[0]\r\n        return .5/N*np.linalg.norm(y - Xbar.dot(w))**2\r\n\r\n    def myGD(w_init, eta):\r\n        w = [w_init]\r\n        for it in range(100):\r\n            w_new = w[-1] - eta*grad(w[-1])\r\n            if np.linalg.norm(grad(w_new))/len(w_new) < 1e-3:\r\n                break \r\n            w.append(w_new)\r\n        return (w, it)\r\n\r\n    w_init = np.array([0, 0])\r\n    (w1, it1) = myGD(w_init, 1)\r\n    st.write('Sol found by GD: w = ', w1[-1], ',\\nafter %d iterations.' %(it1+1))\r\n    # for item in w1:\r\n    #     st.write(item, cost(item))\r\n\r\n    # st.write(len(w1))\r\n\r\n    A = N/(2*N)\r\n    B = np.sum(X*X)/(2*N)\r\n    C = -np.sum(y)/(2*N)\r\n    D = -np.sum(X*y)/(2*N)\r\n    E = np.sum(X)/(2*N)\r\n    F = np.sum(y*y)/(2*N)\r\n\r\n    b = np.linspace(0,6,21)\r\n    w = np.linspace(0,6,21)\r\n    b, w = np.meshgrid(b, w)\r\n    z = A*b*b + B*w*w + C*b*2 + D*w*2 + E*b*w*2 + F\r\n\r\n    fig, ax = plt.subplots()\r\n    plt.contour(b, w, z, 45)\r\n    bdata = []\r\n    wdata = []\r\n    for item in w1:\r\n        plt.plot(item[0], item[1], 'ro', markersize = 3)\r\n        bdata.append(item[0])\r\n        wdata.append(item[1])\r\n\r\n    plt.plot(bdata, wdata, color = 'b')\r\n\r\n    plt.xlabel('b')\r\n    plt.ylabel('w')\r\n    plt.axis('square')\r\n    st.pyplot(fig)\r\nelse:\r\n    st.title('Temp')\r\n\r\n    X = np.linspace(-2, 2, 21)\r\n    Y = np.linspace(-2, 2, 21)\r\n    X, Y = np.meshgrid(X, Y)\r\n    Z = X*X + Y*Y\r\n\r\n    # Create an object for graph layout\r\n    data = go.Surface(x = X, y = Y, z = Z)\r\n    fig = go.Figure(data)\r\n\r\n    st.plotly_chart(fig)
===================================================================
diff --git a/pages/GiamDanDaoHam.py b/pages/GiamDanDaoHam.py
--- a/pages/GiamDanDaoHam.py	
+++ b/pages/GiamDanDaoHam.py	
@@ -317,6 +317,7 @@
     plt.axis('square')
     st.pyplot(fig)
 else:
+    '''
     st.title('Temp')
 
     X = np.linspace(-2, 2, 21)
@@ -328,4 +329,15 @@
     data = go.Surface(x = X, y = Y, z = Z)
     fig = go.Figure(data)
 
-    st.plotly_chart(fig)
\ No newline at end of file
+    st.plotly_chart(fig) 
+    '''
+    ax = plt.axes(projection="3d")
+
+    X = np.linspace(-2, 2, 21)
+    Y = np.linspace(-2, 2, 21)
+    X, Y = np.meshgrid(X, Y)
+    Z = X*X + Y*Y
+    ax.plot_wireframe(X, Y, Z)
+
+    st.set_option('deprecation.showPyplotGlobalUse', False)
+    st.pyplot(fig=None, clear_figure=True) 
